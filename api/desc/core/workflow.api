syntax = "v1"

info(
    title: "Workflow management"
    desc: "Workflow management is often used to access workflow management"
    author: "kubeTasker"
    email: ""
    version: "v1.0"
)

import "../base.api"

type (
    // WorkflowCreateRequest
    WorkflowCreateRequest {
        // Namespace
        Namespace string `json:"namespace"`

        // Workflow
        // type :github.com.argoproj.argo_workflows.v3.pkg.apis.workflow.v1alpha1.Workflow
        Workflow TypeNull `json:"workflow"`

        // InstanceID
        // This field is no longer used.
        InstanceID string `json:"instanceId"`

        // ServerDryRun
        ServerDryRun bool `json:"serverDryRun"`

        // CreateOptions
        // type: k8s.io.apimachinery.pkg.apis.meta.v1.CreateOptions
        CreateOptions TypeNull `json:"createOptions"`
    }

    // WorkflowGetRequest
    WorkflowGetRequest {
        // Name
        Name  string `json:"name"`

        // Namespace
        Namespace  string `json:"namespace"`

        // GetOptions
        // type: k8s.io.apimachinery.pkg.apis.meta.v1.GetOptions
        GetOptions  TypeNull `json:"getOptions"`

        // Fields
        Fields  string `json:"fields"`
    }

    // WorkflowListRequest
    WorkflowListRequest {
        // Namespace
        Namespace  string `json:"namespace"`

        // ListOptions
        // type: k8s.io.apimachinery.pkg.apis.meta.v1.ListOptions
        ListOptions  TypeNull `json:"listOptions"`

        // Fields
        Fields  string `json:"fields"`
    }

    // WorkflowResubmitRequest
    WorkflowResubmitRequest {
        // Name
        Name  string `json:"name"`

        // Namespace
        Namespace  string `json:"namespace"`

        // Memoized
        Memoized  bool `json:"memoized"`

        // Parameters
        Parameters  []string `json:"parameters"`
    }

    // WorkflowRetryRequest
    WorkflowRetryRequest {
        // Name
        Name  string `json:"name"`

        // Namespace
        Namespace  string `json:"namespace"`

        // RestartSuccessful
        RestartSuccessful  bool `json:"restartSuccessful"`

        // NodeFieldSelector
        NodeFieldSelector  string `json:"nodeFieldSelector"`

        // Parameters
        Parameters  []string `json:"parameters"`
    }

    // WorkflowResumeRequest
    WorkflowResumeRequest {
        // Name
        Name  string `json:"name"`

        // Namespace
        Namespace  string `json:"namespace"`

        // NodeFieldSelector
        NodeFieldSelector  string `json:"nodeFieldSelector"`
    }

    // WorkflowTerminateRequest
    WorkflowTerminateRequest {
        // Name
        Name  string `json:"name"`

        // Namespace
        Namespace  string `json:"namespace"`
    }

    // WorkflowStopRequest
    WorkflowStopRequest {
        // Name
        Name  string `json:"name"`

        // Namespace
        Namespace  string `json:"namespace"`

        // NodeFieldSelector
        NodeFieldSelector  string `json:"nodeFieldSelector"`

        // Message
        Message  string `json:"message"`
    }

    // WorkflowSetRequest
    WorkflowSetRequest {
        // Name
        Name  string `json:"name"`

        // Namespace
        Namespace  string `json:"namespace"`

        // NodeFieldSelector
        NodeFieldSelector  string `json:"nodeFieldSelector"`

        // Message
        Message  string `json:"message"`

        // Phase
        Phase  string `json:"phase"`

        // OutputParameters
        OutputParameters  string `json:"outputParameters"`
    }

    // WorkflowSuspendRequest
    WorkflowSuspendRequest {
        // Name
        Name  string `json:"name"`

        // Namespace
        Namespace  string `json:"namespace"`
    }

    // WorkflowLogRequest
    WorkflowLogRequest {
        // Name
        Name  string `json:"name"`

        // Namespace
        Namespace  string `json:"namespace"`

        // PodName
        PodName  string `json:"podName"`

        // LogOptions
        // type: k8s.io.api.core.v1.PodLogOptions
        LogOptions  TypeNull `json:"logOptions"`

        // Grep
        Grep  string `json:"grep"`

        // Selector
        Selector  string `json:"selector"`
    }

    // WorkflowDeleteRequest
    WorkflowDeleteRequest {
        // Name
        Name  string `json:"name"`

        // Namespace
        Namespace  string `json:"namespace"`

        // DeleteOptions
        // type: k8s.io.apimachinery.pkg.apis.meta.v1.DeleteOptions
        DeleteOptions  TypeNull `json:"deleteOptions"`

        // Force
        Force  bool `json:"force"`
    }

    // WorkflowDeleteResponse
    WorkflowDeleteResponse {
    }

    // WatchWorkflowsRequest
    WatchWorkflowsRequest {
        // Namespace
        Namespace  string `json:"namespace"`

        // ListOptions
        // type: k8s.io.apimachinery.pkg.apis.meta.v1.ListOptions
        ListOptions  TypeNull `json:"listOptions"`

        // Fields
        Fields  string `json:"fields"`
    }

    // WorkflowWatchEvent
    WorkflowWatchEvent {
        // Type
        Type  string `json:"type"`

        // Object
        // type: github.com.argoproj.argo_workflows.v3.pkg.apis.workflow.v1alpha1.Workflow
        Object  TypeNull `json:"object"`
    }

    // WatchEventsRequest
    WatchEventsRequest {
        // Namespace
        Namespace  string `json:"namespace"`

        // ListOptions
        // type: k8s.io.apimachinery.pkg.apis.meta.v1.ListOptions
        ListOptions  TypeNull `json:"listOptions"`
    }

    // LogEntry
    LogEntry {
        // Content
        Content  string `json:"content"`

        // PodName
        PodName  string `json:"podName"`
    }

    // WorkflowLintRequest
    WorkflowLintRequest {
        // Namespace
        Namespace  string `json:"namespace"`

        // Workflow
        // type: github.com.argoproj.argo_workflows.v3.pkg.apis.workflow.v1alpha1.Workflow
        Workflow  TypeNull `json:"workflow"`
    }

    // WorkflowSubmitRequest
    WorkflowSubmitRequest {
        // Namespace
        Namespace  string `json:"namespace"`

        // ResourceKind
        ResourceKind  string `json:"resourceKind"`

        // ResourceName
        ResourceName  string `json:"resourceName"`

        // SubmitOptions
        // type: github.com.argoproj.argo_workflows.v3.pkg.apis.workflow.v1alpha1.SubmitOpts
        SubmitOptions  TypeNull `json:"submitOptions"`
    }

    // WorkflowRespond
    WorkflowRespond {
        // Workflow
        // type: github.com.argoproj.argo_workflows.v3.pkg.apis.workflow.v1alpha1.Workflow
        Workflow  TypeNull `json:"workflow"`
    }

    // WorkflowListRespond
    WorkflowListRespond {
        // WorkflowList
        // type: github.com.argoproj.argo_workflows.v3.pkg.apis.workflow.v1alpha1.WorkflowList
        WorkflowList  TypeNull `json:"workflowList"`
    }

    // Event
    Event {
        // Event
        // type: k8s.io.api.core.v1.Event
        Event  TypeNull `json:"event"`
    }

    // WorkflowWatchEventList
    WorkflowWatchEventList {
        // WorkflowWatchEventList
        workflowWatchEventList []WorkflowWatchEvent `json:"workflowWatchEventList"`
    }

    // EventList
    EventList {
        // EventList
        eventList []Event `json:"eventList"`
    }

    // LogEntryList
    LogEntryList {
        // LogEntryList
        LogEntryList []LogEntry `json:"logEntryList"`
    }
)
@server(
    jwt: Auth
    group: workflow
    middleware: Authority
)
service Core {
    // CreateWorkflow
    @handler CreateWorkflow
    post /workflow/create_workflow/:namespace (WorkflowCreateRequest) returns (WorkflowRespond);

    // GetWorkflow
    @handler GetWorkflow
    get /workflow/get_workflow/:namespcae/:name (WorkflowGetRequest) returns (WorkflowRespond)

    // ListWorkflows
    @handler ListWorkflows
    get /workflow/list_workflows/:namespace (WorkflowListRequest) returns (WorkflowListRespond)

    // WatchWorkflows
    @handler WatchWorkflows
    get /workflow/watch_workflows/:namespace (WatchWorkflowsRequest) returns (WorkflowWatchEventList)

    // WatchEvents
    @handler WatchEvents
    get /workflow/watch_events/:namespace (WatchEventsRequest) returns (EventList)

    // DeleteWorkflow
    @handler DeleteWorkflow
    delete /workflow/delete_workflow/:namespace/:name (WorkflowDeleteRequest) returns (WorkflowDeleteResponse)

    // RetryWorkflow
    @handler RetryWorkflow
    put /workflow/retry_workflow/:namespace/:name/retey (WorkflowRetryRequest) returns (WorkflowRespond)

    // ResubmitWorkflow
    @handler ResubmitWorkflow
    put /workflow/resubmit_workflow/:namespace/:name/resubmit (WorkflowResubmitRequest) returns (WorkflowRespond)

    // ResumeWorkflow
    @handler ResumeWorkflow
    put /workflow/resume_workflow/:namespace/:name/resume (WorkflowResumeRequest) returns (WorkflowRespond)

    // SuspendWorkflow
    @handler SuspendWorkflow
    put /workflow/suspend_workflow/:namespace/:name/suspend (WorkflowSuspendRequest) returns (WorkflowRespond)

    // TerminateWorkflow
    @handler TerminateWorkflow
    put /workflow/terminate_workflow/:namespace/:name/terminate (WorkflowTerminateRequest) returns (WorkflowRespond)

    // StopWorkflow
    @handler StopWorkflow
    put /workflow/stop_workflow/:namespace/:name/stop (WorkflowStopRequest) returns (WorkflowRespond)

    // SetWorkflow
    @handler SetWorkflow
    put /workflow/set_workflow/:namespace/:name/set (WorkflowSetRequest) returns (WorkflowRespond)

    // LintWorkflow
    @handler LintWorkflow
    post /workflow/lint_workflow/:namespace/lint (WorkflowLintRequest) returns (WorkflowRespond)

    @handler PodLogs
    get /workflow/pod_logs/:namespace/:name/:podName/log (WorkflowLogRequest) returns (LogEntryList)

    // WorkflowLogs
    @handler WorkflowLogs
    get /workflow/workflow_logs/:namespace/:name/log (WorkflowLogRequest) returns (LogEntryList)

    // SubmitWorkflow
    @handler SubmitWorkflow
    post /workflow/submit_workflow/:namespace/submit (WorkflowSubmitRequest) returns (WorkflowRespond)
}

