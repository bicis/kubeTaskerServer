syntax = "proto3";

package core;
option go_package="./core";

import "k8s.io/api@v0.28.4/core/v1/generated.proto";

import "k8s.io/api@v0.28.4/apps/v1/generated.proto";

message UpdateDeploymentResp {}

//  deletePod
message DeletePodReq {
  string pod_name = 1;
  string namespace = 2;
}

//  getPodContainer
message GetPodContainerReq {
  string pod_name = 1;
  string namespace = 2;
}

//  getPodLog
message GetPodLogReq {
  string container_name = 1;
  string pod_name = 2;
  string namespace = 3;
}

message OauthProviderInfo {
  optional uint64 id = 1;
  optional int64 created_at = 2;
  optional int64 updated_at = 3;
  optional string name = 4;
  optional string client_id = 5;
  optional string client_secret = 6;
  optional string redirect_url = 7;
  optional string scopes = 8;
  optional string auth_url = 9;
  optional string token_url = 10;
  optional uint64 auth_style = 11;
  optional string info_url = 12;
}

message PositionListReq {
  uint64 page = 1;
  uint64 page_size = 2;
  optional string name = 3;
  optional string code = 4;
  optional string remark = 5;
}

//  return the role's authorization menu's ids
message RoleMenuAuthorityResp {
  repeated uint64 menu_id = 1;
}

message UUIDReq {
  string id = 1;
}

message DictionaryListReq {
  uint64 page = 1;
  uint64 page_size = 2;
  optional string name = 3;
}

//  restartDeployment
message RestartDeploymentReq {
  string deployment_name = 1;
  string namespace = 2;
}

//  getDeployNumPerNp
message GetDeployNumPerNpReq {}

message GetPodsResp {
  int64 total = 1;
  repeated k8s.io.api.core.v1.Pod items = 2;
}

message TokenListReq {
  uint64 page = 1;
  uint64 page_size = 2;
  optional string username = 3;
  optional string nickname = 4;
  optional string email = 5;
  optional string uuid = 6;
}

//  authorization message
message RoleMenuAuthorityReq {
  uint64 role_id = 1;
  repeated uint64 menu_id = 2;
}

message IDReq {
  uint64 id = 1;
}

message BaseMsg {
  string msg = 1;
}

message DepartmentInfo {
  optional uint64 id = 1;
  optional int64 created_at = 2;
  optional int64 updated_at = 3;
  optional uint32 status = 4;
  optional uint32 sort = 5;
  optional string name = 6;
  optional string ancestors = 7;
  optional string leader = 8;
  optional string phone = 9;
  optional string email = 10;
  optional string remark = 11;
  optional uint64 parent_id = 12;
}

message GetConfigMapsResp {
  repeated k8s.io.api.core.v1.ConfigMap items = 1;
  int64 total = 2;
}

//  updateConfigMap
message UpdateConfigMapReq {
  string namespace = 1;
  string content = 2;
}

message PodsNp {
  string namespace = 1;
  int64 pod_num = 2;
}

message UUIDsReq {
  repeated string ids = 1;
}

//  getDeployments
message GetDeploymentsReq {
  string filter_name = 1;
  string namespace = 2;
  int64 limit = 3;
  int64 page = 4;
}

//  updateDeployment
message UpdateDeploymentReq {
  string namespace = 1;
  string content = 2;
}

message MenuRoleInfo {
  uint64 id = 1;
  uint64 menu_id = 2;
  uint64 role_id = 3;
}

message BaseIDResp {
  uint64 id = 1;
  string msg = 2;
}

//  getPods
message GetPodsReq {
  string filter_name = 1;
  string namespace = 2;
  int64 limit = 3;
  int64 page = 4;
}

message GetPodContainerResp {
  repeated string containers = 1;
}

message MenuInfo {
  optional uint64 id = 1;
  optional int64 created_at = 2;
  optional int64 updated_at = 3;
  optional uint32 level = 4;
  optional uint64 parent_id = 5;
  optional string path = 6;
  optional string name = 7;
  optional string redirect = 8;
  optional string component = 9;
  optional uint32 sort = 10;
  optional bool disabled = 11;
  optional Meta meta = 12;
  optional uint32 menu_type = 13;
}

message RoleInfo {
  optional uint64 id = 1;
  optional int64 created_at = 2;
  optional int64 updated_at = 3;
  optional uint32 status = 4;
  optional string name = 5;
  optional string code = 6;
  optional string default_router = 7;
  optional string remark = 8;
  optional uint32 sort = 9;
}

message PageInfoReq {
  uint64 page = 1;
  uint64 page_size = 2;
}

//  scaleDeployment
message ScaleDeploymentReq {
  string deployment_name = 1;
  string namespace = 2;
  int64 scale_num = 3;
}

message RestartDeploymentResp {}

message DeploysNp {
  string namespace = 1;
  int64 deploy_num = 2;
}

message PositionInfo {
  optional uint64 id = 1;
  optional int64 created_at = 2;
  optional int64 updated_at = 3;
  optional uint32 status = 4;
  optional uint32 sort = 5;
  optional string name = 6;
  optional string code = 7;
  optional string remark = 8;
}

message UserListResp {
  uint64 total = 1;
  repeated UserInfo data = 2;
}

//  createDeployment
message CreateDeploymentReq {
  string name = 1;
  string namespace = 2;
  int32 replicas = 3;
  string image = 4;
  map<string,string> label = 5;
  string cpu = 6;
  string memory = 7;
  int32 container_port = 8;
  bool health_check = 9;
  string health_path = 10;
}

message GetPodNumPerNpResp {
  repeated PodsNp pods_nps = 1;
}

message MenuInfoList {
  uint64 total = 1;
  repeated MenuInfo data = 2;
}

message PositionListResp {
  uint64 total = 1;
  repeated PositionInfo data = 2;
}

message TokenListResp {
  uint64 total = 1;
  repeated TokenInfo data = 2;
}

message GetPodLogResp {
  string log = 1;
}

message ApiListResp {
  uint64 total = 1;
  repeated ApiInfo data = 2;
}

message IDsReq {
  repeated uint64 ids = 1;
}

message DictionaryInfo {
  optional uint64 id = 1;
  optional int64 created_at = 2;
  optional int64 updated_at = 3;
  optional uint32 status = 4;
  optional string title = 5;
  optional string name = 6;
  optional string desc = 7;
}

message GetConfigMapDetailResp {
  k8s.io.api.core.v1.ConfigMap config_map = 1;
}

message ScaleDeploymentResp {
  int64 replica = 1;
}

//  getPodDetail
message GetPodDetailReq {
  string pod_name = 1;
  string namespace = 2;
}

message UpdatePodResp {}

message CallbackReq {
  string state = 1;
  string code = 2;
}

message TokenInfo {
  optional string id = 1;
  optional int64 created_at = 2;
  optional int64 updated_at = 3;
  optional uint32 status = 4;
  optional string uuid = 5;
  optional string token = 6;
  optional string source = 7;
  optional int64 expired_at = 8;
}

message DepartmentListResp {
  uint64 total = 1;
  repeated DepartmentInfo data = 2;
}

message UpdateConfigMapResp {}

message GetDeployNumPerNpResp {
  repeated DeploysNp deploys_nps = 1;
}

message Meta {
  optional string title = 1;
  optional string icon = 2;
  optional bool hide_menu = 3;
  optional bool hide_breadcrumb = 4;
  optional bool ignore_keep_alive = 5;
  optional bool hide_tab = 6;
  optional string frame_src = 7;
  optional bool carry_param = 8;
  optional bool hide_children_in_menu = 9;
  optional bool affix = 10;
  optional uint32 dynamic_level = 11;
  optional string real_path = 12;
}

message OauthRedirectResp {
  string url = 1;
}

message RoleListReq {
  uint64 page = 1;
  uint64 page_size = 2;
  optional string name = 3;
  optional string code = 4;
  optional string default_router = 5;
}

message UsernameReq {
  string username = 1;
}

message BaseResp {
  string msg = 1;
}

message BaseUUIDResp {
  string id = 1;
  string msg = 2;
}

message DictionaryDetailListReq {
  uint64 page = 1;
  uint64 page_size = 2;
  optional uint64 dictionary_id = 3;
  optional string key = 4;
}

message GetDeploymentDetailResp {
  k8s.io.api.apps.v1.Deployment deployment = 1;
}

message DeleteDeploymentResp {}

//  getPodNumPerNp
message GetPodNumPerNpReq {}

message UserInfo {
  optional string id = 1;
  optional int64 created_at = 2;
  optional int64 updated_at = 3;
  optional uint32 status = 4;
  optional string username = 5;
  optional string password = 6;
  optional string nickname = 7;
  optional string description = 8;
  optional string home_path = 9;
  repeated uint64 role_ids = 10;
  optional string mobile = 11;
  optional string email = 12;
  optional string avatar = 13;
  optional uint64 department_id = 14;
  repeated uint64 position_ids = 15;
  repeated string role_codes = 16;
  repeated string role_name = 17;
}

message DepartmentListReq {
  uint64 page = 1;
  uint64 page_size = 2;
  optional string name = 3;
  optional string leader = 4;
}

//  updatePod
message UpdatePodReq {
  string namespace = 1;
  string content = 2;
}

message DictionaryDetailListResp {
  uint64 total = 1;
  repeated DictionaryDetailInfo data = 2;
}

message GetDeploymentsResp {
  repeated k8s.io.api.apps.v1.Deployment items = 1;
  int64 total = 2;
}

message OauthProviderListResp {
  uint64 total = 1;
  repeated OauthProviderInfo data = 2;
}

message RoleListResp {
  uint64 total = 1;
  repeated RoleInfo data = 2;
}

message ApiInfo {
  optional uint64 id = 1;
  optional int64 created_at = 2;
  optional int64 updated_at = 3;
  optional string path = 4;
  optional string description = 5;
  optional string api_group = 6;
  optional string method = 7;
  optional bool is_required = 8;
}

//  base message
message Empty {}

message DictionaryDetailInfo {
  optional uint64 id = 1;
  optional int64 created_at = 2;
  optional int64 updated_at = 3;
  optional uint32 status = 4;
  optional string title = 5;
  optional string key = 6;
  optional string value = 7;
  optional uint64 dictionary_id = 8;
  optional uint32 sort = 9;
}

//  getConfigMaps
message GetConfigMapsReq {
  string filter_name = 1;
  string namespace = 2;
  int64 limit = 3;
  int64 Page = 4;
}

//  getConfigMapDetail
message GetConfigMapDetailReq {
  string config_map_name = 1;
  string namespace = 2;
}

message MenuRoleListResp {
  uint64 total = 1;
  repeated MenuRoleInfo data = 2;
}

message OauthProviderListReq {
  uint64 page = 1;
  uint64 page_size = 2;
  optional string name = 3;
}

message DictionaryListResp {
  uint64 total = 1;
  repeated DictionaryInfo data = 2;
}

//  deleteDeployment
message DeleteDeploymentReq {
  string deployment_name = 1;
  string namespace = 2;
}

message DeletePodResp {}

message ApiListReq {
  uint64 page = 1;
  uint64 page_size = 2;
  optional string path = 3;
  optional string description = 4;
  optional string api_group = 5;
  optional string method = 6;
  optional string is_default = 7;
}

//  deleteConfigMap
message DeleteConfigMapReq {
  string config_map_mame = 1;
  string namespace = 2;
}

message DeleteConfigMapResp {}

//  getDeploymentDetail
message GetDeploymentDetailReq {
  string deployment_name = 1;
  string namespace = 2;
}

message CreateDeploymentResp {}

message GetPodDetailResp {
  k8s.io.api.core.v1.Pod pod = 1;
}

message OauthLoginReq {
  string state = 1;
  string provider = 2;
}

message UserListReq {
  uint64 page = 1;
  uint64 page_size = 2;
  optional string username = 3;
  optional string nickname = 4;
  optional string email = 5;
  optional string mobile = 6;
  repeated uint64 role_ids = 7;
  optional uint64 department_id = 8;
  repeated uint64 position_ids = 9;
}

service Core {
  //  API management
  //  group: api
  rpc createApi(ApiInfo) returns (BaseIDResp);
  //  group: api
  rpc updateApi(ApiInfo) returns (BaseResp);
  //  group: api
  rpc getApiList(ApiListReq) returns (ApiListResp);
  //  group: api
  rpc getApiById(IDReq) returns (ApiInfo);
  //  group: api
  rpc deleteApi(IDsReq) returns (BaseResp);
  //  group: authority
  rpc getMenuAuthority(IDReq) returns (RoleMenuAuthorityResp);
  //  group: authority
  rpc createOrUpdateMenuAuthority(RoleMenuAuthorityReq) returns (BaseResp);
  //  group: base
  rpc initDatabase(Empty) returns (BaseResp);
  //  Department management
  //  group: department
  rpc createDepartment(DepartmentInfo) returns (BaseIDResp);
  //  group: department
  rpc updateDepartment(DepartmentInfo) returns (BaseResp);
  //  group: department
  rpc getDepartmentList(DepartmentListReq) returns (DepartmentListResp);
  //  group: department
  rpc getDepartmentById(IDReq) returns (DepartmentInfo);
  //  group: department
  rpc deleteDepartment(IDsReq) returns (BaseResp);
  //  Dictionary management
  //  group: dictionary
  rpc createDictionary(DictionaryInfo) returns (BaseIDResp);
  //  group: dictionary
  rpc updateDictionary(DictionaryInfo) returns (BaseResp);
  //  group: dictionary
  rpc getDictionaryList(DictionaryListReq) returns (DictionaryListResp);
  //  group: dictionary
  rpc getDictionaryById(IDReq) returns (DictionaryInfo);
  //  group: dictionary
  rpc deleteDictionary(IDsReq) returns (BaseResp);
  //  DictionaryDetail management
  //  group: dictionarydetail
  rpc createDictionaryDetail(DictionaryDetailInfo) returns (BaseIDResp);
  //  group: dictionarydetail
  rpc updateDictionaryDetail(DictionaryDetailInfo) returns (BaseResp);
  //  group: dictionarydetail
  rpc getDictionaryDetailList(DictionaryDetailListReq) returns (DictionaryDetailListResp);
  //  group: dictionarydetail
  rpc getDictionaryDetailById(IDReq) returns (DictionaryDetailInfo);
  //  group: dictionarydetail
  rpc deleteDictionaryDetail(IDsReq) returns (BaseResp);
  //  group: dictionarydetail
  rpc getDictionaryDetailByDictionaryName(BaseMsg) returns (DictionaryDetailListResp);
  //  K8sConfigMap management
  //  group: k8sconfigmap
  rpc getConfigMaps(GetConfigMapsReq) returns (GetConfigMapsResp);
  //  group: k8sconfigmap
  rpc getConfigMapDetail(GetConfigMapDetailReq) returns (GetConfigMapDetailResp);
  //  group: k8sconfigmap
  rpc deleteConfigMap(DeleteConfigMapReq) returns (DeleteConfigMapResp);
  //  group: k8sconfigmap
  rpc updateConfigMap(UpdateConfigMapReq) returns (UpdateConfigMapResp);
  //  K8sDeployment management
  //  group: k8sdeployment
  rpc getDeployments(GetDeploymentsReq) returns (GetDeploymentsResp);
  //  group: k8sdeployment
  rpc getDeploymentDetail(GetDeploymentDetailReq) returns (GetDeploymentDetailResp);
  //  group: k8sdeployment
  rpc scaleDeployment(ScaleDeploymentReq) returns (ScaleDeploymentResp);
  //  group: k8sdeployment
  rpc createDeployment(CreateDeploymentReq) returns (CreateDeploymentResp);
  //  group: k8sdeployment
  rpc deleteDeployment(DeleteDeploymentReq) returns (DeleteDeploymentResp);
  //  group: k8sdeployment
  rpc restartDeployment(RestartDeploymentReq) returns (RestartDeploymentResp);
  //  group: k8sdeployment
  rpc updateDeployment(UpdateDeploymentReq) returns (UpdateDeploymentResp);
  //  group: k8sdeployment
  rpc getDeployNumPerNp(GetDeployNumPerNpReq) returns (GetDeployNumPerNpResp);
  //  K8sPod management
  //  group: k8spod
  rpc getPods(GetPodsReq) returns (GetPodsResp);
  //  group: k8spod
  rpc getPodDetail(GetPodDetailReq) returns (GetPodDetailResp);
  //  group: k8spod
  rpc deletePod(DeletePodReq) returns (DeletePodResp);
  //  group: k8spod
  rpc updatePod(UpdatePodReq) returns (UpdatePodResp);
  //  group: k8spod
  rpc getPodContainer(GetPodContainerReq) returns (GetPodContainerResp);
  //  group: k8spod
  rpc getPodLog(GetPodLogReq) returns (GetPodLogResp);
  //  group: k8spod
  rpc getPodNumPerNp(GetPodNumPerNpReq) returns (GetPodNumPerNpResp);
  //  group: menu
  rpc createMenu(MenuInfo) returns (BaseIDResp);
  //  group: menu
  rpc updateMenu(MenuInfo) returns (BaseResp);
  //  group: menu
  rpc deleteMenu(IDReq) returns (BaseResp);
  //  group: menu
  rpc getMenuListByRole(BaseMsg) returns (MenuInfoList);
  //  group: menu
  rpc getMenuList(PageInfoReq) returns (MenuInfoList);
  //  OauthProvider management
  //  group: oauthprovider
  rpc createOauthProvider(OauthProviderInfo) returns (BaseIDResp);
  //  group: oauthprovider
  rpc updateOauthProvider(OauthProviderInfo) returns (BaseResp);
  //  group: oauthprovider
  rpc getOauthProviderList(OauthProviderListReq) returns (OauthProviderListResp);
  //  group: oauthprovider
  rpc getOauthProviderById(IDReq) returns (OauthProviderInfo);
  //  group: oauthprovider
  rpc deleteOauthProvider(IDsReq) returns (BaseResp);
  //  group: oauthprovider
  rpc oauthLogin(OauthLoginReq) returns (OauthRedirectResp);
  //  group: oauthprovider
  rpc oauthCallback(CallbackReq) returns (UserInfo);
  //  Position management
  //  group: position
  rpc createPosition(PositionInfo) returns (BaseIDResp);
  //  group: position
  rpc updatePosition(PositionInfo) returns (BaseResp);
  //  group: position
  rpc getPositionList(PositionListReq) returns (PositionListResp);
  //  group: position
  rpc getPositionById(IDReq) returns (PositionInfo);
  //  group: position
  rpc deletePosition(IDsReq) returns (BaseResp);
  //  Role management
  //  group: role
  rpc createRole(RoleInfo) returns (BaseIDResp);
  //  group: role
  rpc updateRole(RoleInfo) returns (BaseResp);
  //  group: role
  rpc getRoleList(RoleListReq) returns (RoleListResp);
  //  group: role
  rpc getRoleById(IDReq) returns (RoleInfo);
  //  group: role
  rpc deleteRole(IDsReq) returns (BaseResp);
  //  Token management
  //  group: token
  rpc createToken(TokenInfo) returns (BaseUUIDResp);
  //  group: token
  rpc deleteToken(UUIDsReq) returns (BaseResp);
  //  group: token
  rpc getTokenList(TokenListReq) returns (TokenListResp);
  //  group: token
  rpc getTokenById(UUIDReq) returns (TokenInfo);
  //  group: token
  rpc blockUserAllToken(UUIDReq) returns (BaseResp);
  //  group: token
  rpc updateToken(TokenInfo) returns (BaseResp);
  //  User management
  //  group: user
  rpc createUser(UserInfo) returns (BaseUUIDResp);
  //  group: user
  rpc updateUser(UserInfo) returns (BaseResp);
  //  group: user
  rpc getUserList(UserListReq) returns (UserListResp);
  //  group: user
  rpc getUserById(UUIDReq) returns (UserInfo);
  //  group: user
  rpc getUserByUsername(UsernameReq) returns (UserInfo);
  //  group: user
  rpc deleteUser(UUIDsReq) returns (BaseResp);
}

